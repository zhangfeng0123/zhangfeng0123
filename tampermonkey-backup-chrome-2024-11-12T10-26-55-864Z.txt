{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"res","options":{"check_for_updates":true,"user_modified":1731406294794,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://25825.sh.absoloop.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","orig_run_in":[],"orig_tags":[],"use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]}},"storage":{"ts":1731038582960,"data":{}},"enabled":true,"position":1,"file_url":"https://update.greasyfork.org/scripts/476072/markVIP.user.js","uuid":"6ec2a086-4d1a-4dbf-a9c3-d4f1c84e852d","source":"","requires":[{"meta":{"name":"ajaxHooker.js","url":"https://greasyfork.org/scripts/455943-ajaxhooker/code/ajaxHooker.js?version=1124435","ts":1731038584886,"mimetype":"text/javascript"},"source":""}]}]}